name: Upload Photo from Website

on:
  workflow_dispatch:
    inputs:
      filename:
        description: 'The name of the file to upload'
        required: true
      blob_sha:
        description: "The SHA of the file's blob content"
        required: true
      person_id:
        description: 'ID of the person this photo belongs to'
        required: false
      person_name:
        description: 'Name of the person this photo belongs to'
        required: false

jobs:
  create-commit:
    runs-on: ubuntu-latest

    steps:
      - name: '‚úÖ Token authenticated! Processing upload'
        run: |
          echo "‚úÖ Authentication verified via token permissions"
          echo "Processing photo upload..."

      - name: '‚úÖ Password OK! Create commit via API'
        env:
          GH_TOKEN: ${{ secrets.GRISSI_TOKEN_PAT }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          BRANCH: 'master'
          FILENAME: ${{ github.event.inputs.filename }}
          BLOB_SHA: ${{ github.event.inputs.blob_sha }}
          PERSON_NAME: ${{ github.event.inputs.person_name }}
        run: |
          set -e # Exit immediately if a command fails

          # --- DEBUGGING STEP ---
          echo "Received Blob SHA: --->${BLOB_SHA}<---"
          if [[ -z "$BLOB_SHA" ]]; then
            echo "::error::Blob SHA is empty! The workflow cannot continue."
            exit 1
          fi
          echo "‚úÖ Blob SHA is valid"
          # --- END OF DEBUGGING STEP ---

          # Handle duplicate filenames by adding timestamp suffix if needed
          base_name="${FILENAME%.*}"
          extension="${FILENAME##*.}"
          final_filename="$FILENAME"
          file_path="images/arvore/$final_filename"

          echo "1. Checking if file already exists..."
          # Try to get the existing file - if it exists, we'll rename our new file
          if gh api "repos/$OWNER/$REPO/contents/$file_path" >/dev/null 2>&1; then
            timestamp=$(date +"%Y%m%d_%H%M%S")
            final_filename="${base_name}_${timestamp}.${extension}"
            file_path="images/arvore/$final_filename"
            echo "   - File exists, renaming to: $final_filename"
          else
            echo "   - Filename available: $final_filename"
          fi

          # Create commit message with person info if provided
          if [ -n "$PERSON_NAME" ]; then
            commit_message="üñºÔ∏è Add photo for $PERSON_NAME: $final_filename"
          else
            commit_message="üñºÔ∏è Add new image: $final_filename"
          fi

          echo "2. Getting latest commit SHA..."
          LATEST_COMMIT_SHA=$(gh api "repos/$OWNER/$REPO/git/ref/heads/$BRANCH" --jq '.object.sha')
          echo "   - Latest commit: $LATEST_COMMIT_SHA"

          echo "3. Getting base tree SHA..."
          BASE_TREE_SHA=$(gh api "repos/$OWNER/$REPO/git/commits/$LATEST_COMMIT_SHA" --jq '.tree.sha')
          echo "   - Base tree: $BASE_TREE_SHA"

          echo "4. Preparing manifest update..."
          # Get current photo-manifest.json
          MANIFEST_PATH="images/arvore/photo-manifest.json"
          MANIFEST_RESPONSE=$(curl -s \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$OWNER/$REPO/contents/$MANIFEST_PATH")
          
          MANIFEST_CONTENT=$(echo "$MANIFEST_RESPONSE" | jq -r '.content' | base64 -d)
          MANIFEST_SHA=$(echo "$MANIFEST_RESPONSE" | jq -r '.sha')
          
          # Check if photo needs to be added to manifest
          if echo "$MANIFEST_CONTENT" | grep -q "\"$final_filename\""; then
            echo "   - Photo already in manifest: $final_filename"
            MANIFEST_BLOB_SHA=""
          else
            echo "   - Photo will be added to manifest: $final_filename"
            
            # Parse JSON, add new photo, and re-encode
            NEW_MANIFEST=$(echo "$MANIFEST_CONTENT" | jq ". + [\"$final_filename\"] | sort")
            NEW_MANIFEST_B64=$(echo -n "$NEW_MANIFEST" | base64 -w 0)
            
            # Create blob for updated manifest
            MANIFEST_BLOB_SHA=$(curl -s -X POST \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$OWNER/$REPO/git/blobs" \
              -d "{\"content\": \"$NEW_MANIFEST_B64\", \"encoding\": \"base64\"}" | jq -r '.sha')
            
            echo "   - Manifest blob created: $MANIFEST_BLOB_SHA"
          fi

          echo "5. Creating new tree with both files..."
          # Build tree array
          if [ -n "$MANIFEST_BLOB_SHA" ]; then
            # Include both image and updated manifest
            TREE_JSON="[
              {\"path\": \"$file_path\", \"mode\": \"100644\", \"type\": \"blob\", \"sha\": \"$BLOB_SHA\"},
              {\"path\": \"$MANIFEST_PATH\", \"mode\": \"100644\", \"type\": \"blob\", \"sha\": \"$MANIFEST_BLOB_SHA\"}
            ]"
            echo "   - Including both image and manifest update"
          else
            # Include only image
            TREE_JSON="[{\"path\": \"$file_path\", \"mode\": \"100644\", \"type\": \"blob\", \"sha\": \"$BLOB_SHA\"}]"
            echo "   - Including only image file"
          fi
          
          NEW_TREE_SHA=$(curl -s -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$OWNER/$REPO/git/trees" \
            -d "{\"base_tree\": \"$BASE_TREE_SHA\", \"tree\": $TREE_JSON}" | jq -r '.sha')
          echo "   - New tree: $NEW_TREE_SHA"

          echo "6. Creating new commit..."
          # Create commit message that includes manifest update if applicable
          if [ -n "$MANIFEST_BLOB_SHA" ]; then
            commit_message="$commit_message"$'\n\n'"üì∏ Update photo manifest - add $final_filename"
          fi
          
          # Escape commit message for JSON
          commit_message_escaped=$(printf '%s' "$commit_message" | jq -R -s .)
          
          COMMIT_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$OWNER/$REPO/git/commits" \
            -d "{
              \"message\": $commit_message_escaped,
              \"parents\": [\"$LATEST_COMMIT_SHA\"],
              \"tree\": \"$NEW_TREE_SHA\"
            }")
          
          NEW_COMMIT_SHA=$(echo "$COMMIT_RESPONSE" | jq -r '.sha')
          echo "   - New commit: $NEW_COMMIT_SHA"
          
          # Check if commit creation failed
          if [ "$NEW_COMMIT_SHA" = "null" ] || [ -z "$NEW_COMMIT_SHA" ]; then
            echo "‚ùå Commit creation failed. Response:"
            echo "$COMMIT_RESPONSE" | jq '.'
            exit 1
          fi

          echo "7. Updating branch reference..."
          gh api "repos/$OWNER/$REPO/git/refs/heads/$BRANCH" -X PATCH \
            -f sha="$NEW_COMMIT_SHA"
            
          echo "‚úÖ Successfully committed $final_filename with manifest update"