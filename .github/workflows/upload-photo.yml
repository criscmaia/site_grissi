name: Upload Photo from Website

on:
  workflow_dispatch:
    inputs:
      password:
        description: 'Admin password for upload'
        required: true
      filename:
        description: 'The name of the file to upload'
        required: true
      blob_sha:
        description: "The SHA of the file's blob content"
        required: true
      person_id:
        description: 'ID of the person this photo belongs to'
        required: false
      person_name:
        description: 'Name of the person this photo belongs to'
        required: false

jobs:
  create-commit:
    runs-on: ubuntu-latest

    steps:
      - name: '🔒 Check Password'
        env:
          INPUT_PASSWORD: ${{ github.event.inputs.password }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        run: |
          if [ "$INPUT_PASSWORD" != "$ADMIN_PASSWORD" ]; then
            echo "❌ Incorrect password."
            exit 1
          fi
          echo "✅ Password verified"

      - name: '✅ Password OK! Create commit via API'
        env:
          GH_TOKEN: ${{ secrets.GRISSI_TOKEN_PAT }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          BRANCH: 'master'
          FILENAME: ${{ github.event.inputs.filename }}
          BLOB_SHA: ${{ github.event.inputs.blob_sha }}
          PERSON_NAME: ${{ github.event.inputs.person_name }}
        run: |
          set -e # Exit immediately if a command fails

          # --- DEBUGGING STEP ---
          echo "Received Blob SHA: --->${BLOB_SHA}<---"
          if [[ -z "$BLOB_SHA" ]]; then
            echo "::error::Blob SHA is empty! The workflow cannot continue."
            exit 1
          fi
          echo "✅ Blob SHA is valid"
          # --- END OF DEBUGGING STEP ---

          # Handle duplicate filenames by adding timestamp suffix if needed
          base_name="${FILENAME%.*}"
          extension="${FILENAME##*.}"
          final_filename="$FILENAME"
          file_path="images/arvore/$final_filename"

          echo "1. Checking if file already exists..."
          # Try to get the existing file - if it exists, we'll rename our new file
          if gh api "repos/$OWNER/$REPO/contents/$file_path" >/dev/null 2>&1; then
            timestamp=$(date +"%Y%m%d_%H%M%S")
            final_filename="${base_name}_${timestamp}.${extension}"
            file_path="images/arvore/$final_filename"
            echo "   - File exists, renaming to: $final_filename"
          else
            echo "   - Filename available: $final_filename"
          fi

          # Create commit message with person info if provided
          if [ -n "$PERSON_NAME" ]; then
            commit_message="🖼️ Add photo for $PERSON_NAME: $final_filename"
          else
            commit_message="🖼️ Add new image: $final_filename"
          fi

          echo "2. Getting latest commit SHA..."
          LATEST_COMMIT_SHA=$(gh api "repos/$OWNER/$REPO/git/ref/heads/$BRANCH" --jq '.object.sha')
          echo "   - Latest commit: $LATEST_COMMIT_SHA"

          echo "3. Getting base tree SHA..."
          BASE_TREE_SHA=$(gh api "repos/$OWNER/$REPO/git/commits/$LATEST_COMMIT_SHA" --jq '.tree.sha')
          echo "   - Base tree: $BASE_TREE_SHA"

          echo "4. Creating new tree..."
          # Create tree using curl instead of gh cli for better control
          NEW_TREE_SHA=$(curl -s -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$OWNER/$REPO/git/trees" \
            -d "{
              \"base_tree\": \"$BASE_TREE_SHA\",
              \"tree\": [
                {
                  \"path\": \"$file_path\",
                  \"mode\": \"100644\",
                  \"type\": \"blob\",
                  \"sha\": \"$BLOB_SHA\"
                }
              ]
            }" | jq -r '.sha')
          echo "   - New tree: $NEW_TREE_SHA"

          echo "5. Creating new commit..."
          # Create commit using curl instead of gh cli for better array handling
          NEW_COMMIT_SHA=$(curl -s -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$OWNER/$REPO/git/commits" \
            -d "{
              \"message\": \"$commit_message\",
              \"parents\": [\"$LATEST_COMMIT_SHA\"],
              \"tree\": \"$NEW_TREE_SHA\"
            }" | jq -r '.sha')
          echo "   - New commit: $NEW_COMMIT_SHA"

          echo "6. Updating photo manifest..."
          # Get current photo-manifest.json
          MANIFEST_PATH="images/arvore/photo-manifest.json"
          MANIFEST_CONTENT=$(curl -s \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$OWNER/$REPO/contents/$MANIFEST_PATH" | jq -r '.content' | base64 -d)
          
          # Add new photo to manifest if not already present
          if echo "$MANIFEST_CONTENT" | grep -q "\"$final_filename\""; then
            echo "   - Photo already in manifest: $final_filename"
          else
            echo "   - Adding photo to manifest: $final_filename"
            
            # Parse JSON, add new photo, and re-encode
            NEW_MANIFEST=$(echo "$MANIFEST_CONTENT" | jq ". + [\"$final_filename\"] | sort")
            NEW_MANIFEST_B64=$(echo -n "$NEW_MANIFEST" | base64 -w 0)
            
            # Get current manifest file SHA for update
            MANIFEST_SHA=$(curl -s \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$OWNER/$REPO/contents/$MANIFEST_PATH" | jq -r '.sha')
            
            # Update photo-manifest.json
            curl -s -X PUT \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$OWNER/$REPO/contents/$MANIFEST_PATH" \
              -d "{
                \"message\": \"📸 Update photo manifest - add $final_filename\",
                \"content\": \"$NEW_MANIFEST_B64\",
                \"sha\": \"$MANIFEST_SHA\"
              }" > /dev/null
            
            echo "   - Manifest updated successfully"
          fi

          echo "7. Updating branch reference..."
          gh api "repos/$OWNER/$REPO/git/refs/heads/$BRANCH" -X PATCH \
            -f sha="$NEW_COMMIT_SHA"
            
          echo "✅ Successfully committed $final_filename and updated manifest"